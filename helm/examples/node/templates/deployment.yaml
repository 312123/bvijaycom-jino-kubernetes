{{- if .Values.nodedeploy.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "node.fullname" . }}
  labels:
    app: {{ template "node.fullname" . }}-node
    chart: {{ template "node.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  replicas: {{ .Values.nodereplicaCount}}
  minReadySeconds: {{ .Values.minReadySeconds }}
  selector:
    matchLabels:
      app: {{ template "node.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      name: web
      labels:
        app: {{ template "node.fullname" . }}
        chart: {{ template "node.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      containers:
      - name: node-server
        image: {{ .Values.nodeimage.repository}}:{{ .Values.nodeimage.tag}}
        ports:
        - containerPort: 8080
          protocol: TCP
      initContainers:
      - name: init-myservice
        image: jjino/test:latest
        args:
          - bash
          - -c
          - while true; do STATUS=$(redis-cli -h redis-service -p 6379 ping); if [ $STATUS = "PONG" ]; then echo "Connected"; break; else echo "Not connected"; fi; sleep 10; done
{{- end }}

{{- if .Values.redisdeploy.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "node.fullname" . }}
  labels:
    app: {{ template "node.fullname" . }}-redis
    chart: {{ template "node.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: RollingUpdate #Bydefault (RollingUpdate/Recreate)
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  replicas: {{ .Values.redisreplicaCount}}
  minReadySeconds: {{ .Values.minReadySeconds }}
  selector:
    matchLabels:
      role: cache-server
  template:
    metadata:
      name: web
      labels:
        role: cache-server
    spec:
      containers:
      - name: redis-server
        image: {{ .Values.redisimage.repository}}:{{ .Values.redisimage.tag}}
        ports:
        - containerPort: 6379
          protocol: TCP
{{- end }}

{{- if .Values.redisservice.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    role: redis-service
spec:
  selector:
    role: cache-server
  type: ClusterIP
  ports:
  - port: 6379
{{- end }}

{{- if .Values.nodeservice.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 8080
  type: LoadBalancer
{{- end }}
